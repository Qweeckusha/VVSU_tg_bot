'''
                             _    ___    __________  __     __          __
                            | |  / / |  / / ____/ / / /    / /_  ____  / /_
                            | | / /| | / / / __/ / / /    / __ \/ __ \/ __/
                            | |/ / | |/ / /_/ / /_/ /    / /_/ / /_/ / /_
                            |___/  |___/\____/\____/____/_.___/\____/\__/
                                                  /_____/

if Qweeck:
    print('–•–æ–ª–æ—Ö–æ–Ω –ê–Ω–∞—Ç–æ–ª–∏–π –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∏—á')
    Qweeck.status = 'dev'

'''
from datetime import datetime
import pymorphy2
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from io import BytesIO
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InputFile, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import executor
from docx import Document
from docx.shared import Pt


from config import API_TOKEN

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)



# -------------------------------------------------------------------
# –ö–ª–∞—Å—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏–º–æ–≥–æ –≤ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.
# -------------------------------------------------------------------
class DocFormStates(StatesGroup):
    director_full_name = State()
    group = State()
    full_name = State()
    contact = State()
    date_from = State()
    date_to = State()
    org_name = State()
    org_phone = State()
    full_name_org = State()
    org_job = State()
    full_name_kafedra = State()
    reasons = State()
    date_to2 = State()
    legal_adress = State()
    mail = State()
    inn = State()
    ogrn = State()
    okpo = State()
    bik = State()
    direction = State()
    type_practice = State()
    date_from_pr = State()
    date_to_pr = State()



@dp.message_handler(Command("start"))
async def process_start_command(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –∏ –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É')]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏—è –∏ –¥–æ–≥–æ–≤–æ—Ä–∞ –æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.", reply_markup=markup)
    await message.answer('–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –∏ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –≤ –º–µ–Ω—é.',
                         reply_markup=InlineKeyboardMarkup(
                             inline_keyboard=[
                                [InlineKeyboardButton('–ì–¥–µ –º–µ–Ω—é?', callback_data='wheremenu')]
    ]))
    await message.delete()

#new code
@dp.callback_query_handler(lambda c: c.data == 'wheremenu')
async def where_menu(call: types.CallbackQuery):
        await call.bot.send_photo(call.message.chat.id, photo=InputFile('templates/menu.jpg'), caption='–ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º —Å–æ —Å—Ç—Ä–æ–∫–æ–π –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–ø—Ä–∞–≤–∞).')
# ------------------------------------------------------
# ‚Üì‚Üì‚Üì –ê–ª–≥–æ—Ä–∏—Ç–º —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É" ‚Üì‚Üì‚Üì
# ------------------------------------------------------

@dp.message_handler(Text(equals='–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –∏ –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É'))
async def process_personal_data(message: types.Message):

    await message.answer('‚ùó–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö‚ùó\n\n–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ '
                         '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?',parse_mode='HTML', reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
        [InlineKeyboardButton('‚úÖ –î–∞ ‚úÖ', callback_data='PDyes'), InlineKeyboardButton('‚ùå –ù–µ—Ç ‚ùå', callback_data='PDno')],
        [InlineKeyboardButton('üìÉ –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î–Ω üìÉ', callback_data='PDcheck')]

    ]), disable_web_page_preview = True)

@dp.callback_query_handler(lambda c: c.data.startswith('PD'))
async def process_create_document(call: types.CallbackQuery):
    if call.data == 'PDyes':
        markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
            [KeyboardButton('–û—Ç–º–µ–Ω–∞')]
        ])
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await DocFormStates.group.set()
        await call.message.answer('‚ùó–û–±—Ä–∞—â–∞—é –≤–Ω–∏–º–∞–Ω–∏–µ‚ùó\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n'
                             '–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" —Å–Ω–∏–∑—É. –ú–æ–∂–µ—Ç–µ '
                             '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–µ—Ä—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–ø–µ—á–∞—Ç–∫–∏. \n\n–í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≥–æ—Ç–æ–≤—ã–π '
                             '–¥–æ–∫—É–º–µ–Ω—Ç —Ç–æ–∂–µ –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.', reply_markup=markup)
        await call.message.answer("<b>–°–µ–π—á–∞—Å –≤—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ!</b>", parse_mode='HTML')
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>–ë–ò–ù-23-1</b>", parse_mode='HTML')

    elif call.data == 'PDcheck':
        await call.bot.send_document(call.message.chat.id, InputFile('templates/–°–æ–≥–ª–∞—Å–∏–µ_–Ω–∞_–æ–±—Ä–∞–±–æ—Ç–∫—É_–ü–î–Ω.docx'),
                                     caption='–≠—Ç–æ—Ç —Ñ–∞–π–ª –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É.')
    else:
        await call.message.answer('–í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.')
@dp.message_handler(lambda message: '–æ—Ç–º–µ–Ω–∞' in message.text.lower(), state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –∏ –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É')]
    ])
    await message.answer('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.', reply_markup=markup)

@dp.message_handler(state=DocFormStates.group)
async def process_group(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['group'] = message.text


    await DocFormStates.full_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</b>", parse_mode='HTML')

@dp.message_handler(state=DocFormStates.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['full_name'] = message.text


    await DocFormStates.director_full_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞/–∑–∞–≤–µ–¥—É—é—â–µ–≥–æ –∫–∞—Ñ–µ–¥—Ä–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</b>", parse_mode='HTML')

@dp.message_handler(state=DocFormStates.director_full_name)
async def process_full_name_director(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['full_name_director'] = message.text


    await DocFormStates.contact.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <b>–ò–õ–ò</b> e-mail, –Ω–∞–ø—Ä–∏–º–µ—Ä <b>+79123458796 | 89123458796</b> –∏–ª–∏ <b>email@gmail.com</b>", parse_mode='HTML')

@dp.message_handler(state=DocFormStates.contact)
async def process_contact(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['contact'] = message.text
    await DocFormStates.date_from.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏,"
                         " –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>24 –∞–ø—Ä–µ–ª—è 2024</b>", parse_mode='HTML', reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton('–ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ', callback_data='desc')]
    ]))

@dp.callback_query_handler(lambda c: c.data == 'desc', state=DocFormStates.date_from)
async def call_desc(call: types.CallbackQuery):
    await call.message.answer('–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤–∞—à–µ–π –ø–µ—Ä–≤–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n <b>–í–∞—à–∞ –ø–µ—Ä–≤–∞—è '
                              '–ø—Ä–∞–∫—Ç–∏–∫–∞ —É—á–µ–±–Ω–∞—è, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–¥–µ—Å—å '
                              '–¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —É—á–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏</b>\n\n‚ùó–ò–¥–µ—è –≤ —Ç–æ–º, —á—Ç–æ –≤—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–π '
                              '–ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –∫–æ–Ω–µ—Ü —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π (–≠–¢–û –°–õ–ï–î–£–Æ–©–ò–ô –í–û–ü–†–û–°), '
                              '–∏–∑ —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞', parse_mode='HTML')

@dp.message_handler(state=DocFormStates.date_from)
async def process_date_from(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['date_from'] = message.text

    await DocFormStates.date_to.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>15 –∏—é–ª—è 2025</b>", parse_mode='HTML')

@dp.message_handler(state=DocFormStates.date_to)
async def process_date_to(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['date_to'] = message.text

    await DocFormStates.org_name.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>–û–û–û "–Æ–Ω–∏–∫–æ–º"</b>', parse_mode='HTML')

@dp.message_handler(state=DocFormStates.org_name)
async def process_org_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['org_name'] = message.text

    await DocFormStates.org_phone.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>+78005553535 –∏–ª–∏ 88005553535</b>", parse_mode='HTML')
# –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è –∏ –≤ –¥–æ–≥–æ–≤–æ—Ä–µ


@dp.message_handler(state=DocFormStates.org_phone)
async def process_org_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['org_phone'] = message.text

    await DocFormStates.full_name_org.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</b>", parse_mode='HTML')

@dp.message_handler(state=DocFormStates.full_name_org)
async def process_full_name_org(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['full_name_org'] = message.text

    await DocFormStates.org_job.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>—É–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä</b>", parse_mode='HTML')

@dp.message_handler(state=DocFormStates.org_job)
async def process_org_job(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['org_job'] = message.text.capitalize()


    await fill_document(
        template_path='templates/–ó–∞—è–≤–ª–µ–Ω–∏–µ_–Ω–∞_–ø—Ä–∞–∫—Ç–∏–∫—É.docx',
        director_full_name=data['full_name_director'],
        group=data['group'],
        full_name=data['full_name'],
        contact=data['contact'],
        date_from=data['date_from'],
        date_to=data['date_to'],
        org_name=data['org_name'],
        org_phone=data['org_phone'],
        full_name_org=data['full_name_org'],
        org_job=data['org_job'].capitalize(),
        f_initial=format_fio(data['full_name']),
        message=message
    )

    await message.answer("<b>–ó–∞—è–≤–ª–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!</b>",
                         parse_mode='HTML')
    await DocFormStates.reasons.set()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —á–µ–≥–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>—É—Å—Ç–∞–≤–∞ –∏–ª–∏ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ‚Ññ</b>",
                         parse_mode='HTML')

# -------------------------------------------------------------------------------
# ‚Üì‚Üì‚Üì –ê–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞ "–î–æ–≥–æ–≤–æ—Ä –æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ" ‚Üì‚Üì‚Üì
# -------------------------------------------------------------------------------


@dp.message_handler(state=DocFormStates.reasons)
async def process_reasons(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['reasons'] = message.text.lower()

        await DocFormStates.date_to2.set()
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –¥–æ –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ–≥–æ–≤–æ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>24.02.2024</b>",
                             parse_mode='HTML')

@dp.message_handler(state=DocFormStates.date_to2)
async def process_dateto2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['date_to2'] = message.text

        await DocFormStates.legal_adress.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>690008, –≥. –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, —É–ª. –î–µ—Ä–∂–∞–≤–∏–Ω–∞, –¥.14, –∫–≤. 57</b>",
                             parse_mode='HTML')

@dp.message_handler(state=DocFormStates.legal_adress)
async def process_legal_adress(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['legal_adress'] = message.text

        await DocFormStates.mail.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π) –∞–¥—Ä–µ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>690003, –≥. –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, —É–ª. –õ—É–≥–æ–≤–∞—è, –¥.17</b>",
                             parse_mode='HTML')

@dp.message_handler(state=DocFormStates.mail)
async def process_mail(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['mail'] = message.text

        await DocFormStates.inn.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∏–ª–∏ –ö–ü–ü –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>121212121212</b>",
                                parse_mode='HTML')

@dp.message_handler(state=DocFormStates.inn)
async def process_inn(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['inn'] = message.text

        await DocFormStates.ogrn.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –û–ì–†–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>151515151515151</b>",
                             parse_mode='HTML')

@dp.message_handler(state=DocFormStates.ogrn)
async def process_ogrn(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['ogrn'] = message.text

        await DocFormStates.okpo.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –û–ö–ü–û –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ù–µ—Ç"), –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>88888888</b>',
                             parse_mode='HTML')

@dp.message_handler(state=DocFormStates.okpo)
async def process_okpo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == '-' or message.text == '–ù–µ—Ç' or message.text == '–Ω–µ—Ç':
            data['okpo'] = ''
        else:
            data['okpo'] = f'–û–ö–ü–û: {message.text}'

    await DocFormStates.bik.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ë–ò–ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (9 —Ü–∏—Ñ—Ä), –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>999999999</b>",
                             parse_mode='HTML')

@dp.message_handler(state=DocFormStates.bik)
async def process_bik(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['bik'] = message.text

    await DocFormStates.direction.set()
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è</b>", parse_mode='HTML')

@dp.message_handler(state=DocFormStates.direction)
async def process_direction(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['direction'] = message.text

    await DocFormStates.type_practice.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç. <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é —Å–Ω–∏–∑—É.</b>", parse_mode='HTML',
                         reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [KeyboardButton('–£—á–µ–±–Ω–∞—è')], [KeyboardButton('–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è')], [KeyboardButton('–ü—Ä–µ–¥–¥–∏–ø–ª–æ–º–Ω–∞—è')]
    ]))

@dp.message_handler(state=DocFormStates.type_practice)
async def process_type_practice(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if 'type_practice' not in data:
            data['type_practice'] = '' # –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–ø—Ä–∏—Å–≤–æ–∏—Ç—å
        if data['type_practice'] == '':
            data['type_practice'] = data['type_practice'] + message.text
        else:
            data['type_practice'] = data['type_practice'] + '\n\n' + message.text

        await DocFormStates.date_from_pr.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ—ë –Ω–∞—á–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>24.03.2024</b>", parse_mode='HTML')

@dp.message_handler(state=DocFormStates.date_from_pr)
async def process_date_from_pr(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['date_from_pr'] = message.text

    await DocFormStates.date_to_pr.set()
    await message.answer("–ò —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: <b>21.04.2024</b>", parse_mode='HTML')

@dp.message_handler(state=DocFormStates.date_to_pr)
async def process_date_to_pr(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text not in ['–î–æ–ø–æ–ª–Ω–∏—Ç—å', '–ù–µ—Ç']:
            if 'date_complete_pr' not in data:
                data['date_complete_pr'] = ''
            if data['date_complete_pr'] == '':
                data['date_complete_pr'] = data['date_complete_pr'] + f'{data["date_from_pr"]}-{message.text}'
            else:
                data['date_complete_pr'] = data['date_complete_pr'] + '\n\n' + f'{data["date_from_pr"]}-{message.text}'

            markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
                [KeyboardButton('–î–æ–ø–æ–ª–Ω–∏—Ç—å')], [KeyboardButton('–ù–µ—Ç')]
            ])
            await message.answer('–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ '
                                 '"–î–æ–ø–æ–ª–Ω–∏—Ç—å", –∏–Ω–∞—á–µ –Ω–∞–∂–º–∏—Ç–µ "–ù–µ—Ç"', parse_mode='HTML', reply_markup=markup)

        if message.text.lower() == '–¥–æ–ø–æ–ª–Ω–∏—Ç—å':
            await DocFormStates.type_practice.set()
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç. <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é —Å–Ω–∏–∑—É.</b>",
                                 parse_mode='HTML',
                                 reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
                [KeyboardButton('–£—á–µ–±–Ω–∞—è')], [KeyboardButton('–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è')], [KeyboardButton('–ü—Ä–µ–¥–¥–∏–ø–ª–æ–º–Ω–∞—è')]
            ]))
        elif message.text.lower() == '–Ω–µ—Ç':
            markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
                [KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –∏ –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É')]
            ])
            await fill_document2(
                template_path='templates/–î–æ–≥–æ–≤–æ—Ä_–í–í–ì–£_–æ_–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π_–ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ.docx',
                organization=data['org_name'],
                position=f"{get_genitive(data['org_job'])} {get_genitive_cap(data['full_name_org'])}",
                reasons=first_word_lower(data['reasons']),
                date_to2=data['date_to2'],
                legal_adress=data['legal_adress'],
                mail=data['mail'],
                inn=data['inn'],
                ogrn=data['ogrn'],
                okpo=data['okpo'],
                bik=data['bik'],
                contact=data['org_phone'],
                profession=data['org_job'].capitalize(),
                ceo=format_fio(data['full_name_org']),
                full_name=data['full_name'],
                phone=data['contact'],
                direction=data['direction'],
                group=data['group'],
                date_complete=data['date_complete_pr'],
                type_practice=data['type_practice'],
                message=message
            )
            await message.answer('–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞!ü•≥ü•≥ü•≥', reply_markup=markup)
            await message.answer('‚ùó‚ùó‚ùó–í–ù–ò–ú–ê–ù–ò–ï‚ùó‚ùó‚ùó\n<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ  –∏ –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –ø–µ—á–∞—Ç—å—é.</b>\n\n'
                                 '1. –ù–µ –∑–∞–±—É–¥—å—Ç–µ <b>—Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –∏ –≤—Ä—É—á–Ω—É—é</b> –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö '
                                 '–¥–∞–Ω–Ω—ã—Ö (–æ–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ–∞–π–ª–µ "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î–Ω.docx").\n\n'
                                 '2. –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –≤ 2-—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö –¥–æ–≥–æ–≤–æ—Ä, –æ—Ç–Ω–µ—Å–∏—Ç–µ –∏—Ö –≤ "–°—Ç–∞—Ä—Ç-–ö–∞—Ä—å–µ—Ä—É" (–∞—É–¥–∏—Ç–æ—Ä–∏—è 1442).\n\n'
                                 '3. –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç–Ω–µ—Å–∏—Ç–µ –≤ —Å–≤–æ—é –∫–∞—Ñ–µ–¥—Ä—É.', parse_mode='HTML')
            await state.finish()

def format_fio(full_name):
    fio_parts = full_name.split()
    initials = ' '.join([name[0] + '.' for name in fio_parts[1:]])
    return f"{fio_parts[0]} {initials}"

def first_word_lower(stroka):
    if len(stroka.split()) > 1:
        words = stroka.split()
        other_words = ' '.join([name for name in words[1:]])
        return f'{words[0].lower()} {other_words}'
    else:
        return stroka.lower()

def get_genitive(words):
    try:
        morph = pymorphy2.MorphAnalyzer()
        return ' '.join([morph.parse(i)[0].inflect({'gent'}).word for i in words.split()])
    except:
        return words


def get_genitive_cap(words):
    try:
        morph = pymorphy2.MorphAnalyzer()
        return ' '.join([morph.parse(i)[0].inflect({'gent'}).word.capitalize() for i in words.split()])
    except:
        return words

# ---------------------------------------------------------
# ‚Üì‚Üì‚Üì –ê–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Üì‚Üì‚Üì
# ---------------------------------------------------------

async def fill_document(
        template_path,
        director_full_name,
        group,
        full_name,
        contact,
        date_from,
        date_to,
        org_name,
        org_phone,
        full_name_org,
        org_job,
        f_initial,
        message
        ):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
    doc = Document(template_path)
    style = doc.styles['Normal']
    style.font.name = 'Times New Roman'
    style.font.size = Pt(14)

    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    replace_text(doc, "{{FULL_NAME_DIRECTOR}}", director_full_name)
    replace_text(doc, "{{GROUP}}", group, underline=True)
    replace_text(doc, "{{FULL_NAME}}", full_name, underline=True)
    replace_text(doc, "{{CONTACT}}", contact, underline=True)
    replace_text(doc, "{{DATE_FROM}}", date_from, space=False)
    replace_text(doc, "{{DATE_TO}}", date_to, space=False)
    replace_text(doc, "{{ORG_NAME}}", org_name)
    replace_text(doc, "{{ORG_PHONE}}", org_phone)
    replace_text(doc, "{{FULL_NAME_ORG}}", full_name_org, underline=True)
    replace_text(doc, "{{ORG_JOB}}", org_job, underline=True)
    replace_text(doc, "{{TODAY_DATE}}", datetime.now().strftime('¬´%d¬ª %m %Y'), space=False)
    replace_text(doc, "{{INITIALS_STUD}}", f_initial, space=False)




    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    doc_bytes = BytesIO()
    doc.save(doc_bytes)
    doc_bytes.seek(0)

    await bot.send_document(message.chat.id, InputFile(doc_bytes, filename='–ó–∞—è–≤–ª–µ–Ω–∏–µ.docx'))

def replace_text(doc, placeholder, new_text, underline=False, space=True):
    placeholders = ['{{FULL_NAME_DIRECTOR}}', '{{ORG_PHONE}}', '{{ORG_NAME}}']
    for paragraph in doc.paragraphs:
        if placeholder in paragraph.text:
            # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–∫—É –Ω–∞ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç

            if placeholder in placeholders:
                paragraph.text = paragraph.text.replace(placeholder, '')
                paragraph.add_run('¬†¬†¬†¬†' + new_text + '¬†¬†¬†¬†').underline = True
            elif placeholder == '{{INITIALS_STUD}}':
                paragraph.text = paragraph.text.replace(placeholder, '')
                paragraph.add_run(new_text).underline = True
                paragraph.add_run(' (–∏–Ω–∏—Ü–∏–∞–ª—ã, —Ñ–∞–º–∏–ª–∏—è)').font.size = Pt(10)
            else:
                if space:
                    paragraph.text = paragraph.text.replace(placeholder, '¬†¬†¬†¬†' + new_text + '¬†¬†¬†¬†')
                    if underline:
                        for run in paragraph.runs:
                            run.underline = True
                else:
                    paragraph.text = paragraph.text.replace(placeholder, new_text)
                    if underline:
                        for run in paragraph.runs:
                            run.underline = True

# ---------------------------------------------------------
# ‚Üì‚Üì‚Üì –ê–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç 2 —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚Üì‚Üì‚Üì
# ---------------------------------------------------------
async def fill_document2(
        template_path,
        organization,
        position,
        reasons,
        date_to2,
        legal_adress,
        mail,
        inn,
        ogrn,
        okpo,
        bik,
        contact,
        profession,
        ceo,
        full_name,
        phone,
        direction,
        group,
        date_complete,
        type_practice,
        message
        ):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
    doc = Document(template_path)
    style = doc.styles['Normal']
    style.font.name = 'Times New Roman'
    style.font.size = Pt(12)

    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–∫–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    replace_text_special(doc, organization, position, reasons, date_to2)
    replace_text2(doc, '{{ORG_NAME}}', organization)
    replace_text2(doc, '{{LEGAL_ADRESS}}', legal_adress)
    replace_text2(doc, '{{MAIL}}', mail)
    replace_text2(doc, '{{INN}}', inn)
    replace_text2(doc, '{{OGRN}}', ogrn)
    replace_text2(doc, '{{OKPO}}', okpo)
    replace_text2(doc, '{{BIK}}', bik)
    replace_text2(doc, '{{CONTACT}}', contact)
    replace_text2(doc, '{{PROFESSION}}', profession)
    replace_text2(doc, '{{CEO}}', ceo)
    replace_text2(doc, '{{FULL_NAME}}', full_name)
    replace_text2(doc, '{{PHONE}}', phone)
    replace_text2(doc, '{{DIRECTION}}', direction)
    replace_text2(doc, '{{GROUP}}', group)
    replace_text2(doc, '{{DATE_COMPLETE}}', date_complete)
    replace_text2(doc, '{{MAIL}}', mail)
    replace_text2(doc, '{{TYPE_PRACTICE}}', type_practice)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    doc_bytes = BytesIO()
    doc.save(doc_bytes)
    doc_bytes.seek(0)

    await bot.send_document(message.chat.id, InputFile(doc_bytes, filename=f'–î–æ–≥–æ–≤–æ—Ä.docx'))
    await bot.send_document(message.chat.id, InputFile('templates/–°–æ–≥–ª–∞—Å–∏–µ_–Ω–∞_–æ–±—Ä–∞–±–æ—Ç–∫—É_–ü–î–Ω.docx', filename=f'–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î–Ω.docx'))



def replace_text_special(doc, new_text, new_text2, new_text3, new_text4):
    for paragraph in doc.paragraphs:
        if '{{ABOUT_ORG}}' in paragraph.text:
            # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–∫—É –Ω–∞ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç

            paragraph.text = paragraph.text.replace('{{ABOUT_ORG}}', '')
            paragraph.add_run(new_text).underline = True
            paragraph.add_run(', –∏–º–µ–Ω—É–µ–º–æ–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º ¬´–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è¬ª, –≤ –ª–∏—Ü–µ ')

            paragraph.add_run(new_text2).underline = True
            paragraph.add_run(', –¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ ')

            paragraph.add_run(new_text3).underline = True
            paragraph.add_run(', —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –∏–º–µ–Ω—É–µ–º—ã–µ –ø–æ '
                                     '–æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ ¬´–°—Ç–æ—Ä–æ–Ω–∞¬ª, –∞ –≤–º–µ—Å—Ç–µ ‚Äì ¬´–°—Ç–æ—Ä–æ–Ω—ã¬ª, –∑–∞–∫–ª—é—á–∏–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –î–æ–≥–æ–≤–æ—Ä –æ '
                                     '–Ω–∏–∂–µ—Å–ª–µ–¥—É—é—â–µ–º.')

        if '{{DATE_TO}}' in paragraph.text:
            paragraph.text = paragraph.text.replace('{{DATE_TO}}', '')
            paragraph.add_run(new_text4).underline = True
            paragraph.add_run(' –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –Ω–∞ –æ–¥–∏–Ω –≥–æ–¥, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∏–∑ —Å—Ç–æ—Ä–æ–Ω –∑–∞ 30 (—Ç—Ä–∏–¥—Ü–∞—Ç—å) '
                              '—Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –Ω–µ –∑–∞—è–≤–∏—Ç –æ —Å–≤–æ–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–∏ –µ–≥–æ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å.')


def replace_text2(doc, placeholder, new_text):
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    if placeholder in paragraph.text:
                        # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–∫—É –Ω–∞ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                        paragraph.text = paragraph.text.replace(placeholder, new_text)
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã
                        for run in paragraph.runs:
                            run.font.size = Pt(12)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ 12
                            run.font.bold = False   # –£–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ



try:
    executor.start_polling(dp, skip_updates=True)
except:
    # async def error(message: types.Message):
    #     markup = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    #         [KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –∏ –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É')]
    #     ])
    #     await message.answer('–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. /start', reply_markup=markup)
    print('–û—à–∏–±–æ—á–∫–∞.')